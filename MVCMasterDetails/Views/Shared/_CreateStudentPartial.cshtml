@model MVCMasterDetails.ViewModels.StudentViewModel

<div class="modal-header">
    <h5 class="modal-title">Create New Student</h5>
  
</div>
<div class="modal-body">
    @using (Html.BeginForm("CreateStudent", "Student", FormMethod.Post, new { id = "createStudentForm", enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="row">
            <div class="col-md-7">
                <h4> Student Information</h4>
                <div class="form-group mb-2">
                    @Html.LabelFor(model => model.StudentName, htmlAttributes: new { @class = "control-label col-md-3" })
                    @Html.EditorFor(model => model.StudentName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.StudentName, "", new { @class = "text-danger" })
                </div>
                <div class="form-group mb-2">
                    @Html.LabelFor(model => model.AdmissionDate, htmlAttributes: new { @class = "control-label col-md-3" })
                    @Html.EditorFor(model => model.AdmissionDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.AdmissionDate, "", new { @class = "text-danger" })
                </div>
                <div class="form-group mb-2">
                    @Html.LabelFor(model => model.MobileNo, htmlAttributes: new { @class = "control-label col-md-3" })
                    @Html.EditorFor(model => model.MobileNo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MobileNo, "", new { @class = "text-danger" })
                </div>
                <div class="form-group mb-2">
                    @Html.LabelFor(model => model.IsEnrolled, htmlAttributes: new { @class = "control-label col-md-3" })
                    @Html.EditorFor(model => model.IsEnrolled)
                    @Html.ValidationMessageFor(model => model.IsEnrolled, "", new { @class = "text-danger" })
                </div>
                <div class="form-group mb-2">
                    @Html.LabelFor(model => model.CourseId, htmlAttributes: new { @class = "control-label col-md-3" })
                    @Html.DropDownListFor(model => model.CourseId, new SelectList(Model.Courses, "CourseId", "CourseName"), "Select Course", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CourseId, "", new { @class = "text-danger" })
                </div>
                <div class="form-group mb-2">
                    <img id="imageFile" src="~/images/noimage.png" alt="image" width="100" /><br />
                    @Html.LabelFor(model => model.ProfileFile, htmlAttributes: new { @class = "control-label col-md-3" })
                    <input onchange="readUrl(this)" type="file" name="ProfileFile" id="ProfileFile" class="invisible" />
                </div>
            </div>
            <div class="col-md-5">
                <h4> Module Information</h4>
                <button onclick="AddModule()" type="button" class="btn btn-warning mb-2">Add Module</button>
                @Html.Partial("_AddModules", Model.CourseModules)
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="submit" class="btn btn-success">Create Student</button>
        </div>
    }
</div>

<script>
    function readUrl(i) {
        if (i.files && i.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $("#imageFile").attr('src', e.target.result)
            }
            reader.readAsDataURL(i.files[0]);
        }
    }
    function deleteRow(btn) {
        $(btn).closest('tr').remove();
        updateCourseModuleIndex();
    }
    function AddModule() {
        var lastIndex = parseInt($('#HIndex').val());
        var newRow = `<tr> <td>
        <input type="text" name="CourseModules[${lastIndex}].ModuleName" value="" class="form-control" /></td><td>
         <input type="text" name="CourseModules[${lastIndex}].Duration" value="" class="form-control" /></td><td>
          <button type="button" class="btn btn-danger" onclick="deleteRow(this)">Delete</button>
         </td></tr> `;
        $("#ExTable tbody").append(newRow);
        $('#HIndex').val(lastIndex + 1);
        updateCourseModuleIndex();
    }
    function updateCourseModuleIndex() {
        $("#ExTable tbody tr").each(function (index) {
            $(this).find("input[name^='CourseModules']").each(function () {
                var name = $(this).attr("name");
                name = name.replace(/CourseModules\[\d+\]/, "CourseModules[" + index + "]");
                $(this).attr("name", name)
            })
        })
    }
</script>